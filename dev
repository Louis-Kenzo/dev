# Stacks are colon separated lists of variables. For example, PATH and
# PYTHONPATH are stacks.

# dev adds and removes paths to stacks, and tracks those additions in stack
# tracker environment variables, whose names are given by a call to
# __dev_stackName. Stack trackers are themselves tracked in the __DEV_STACKS
# environment variable.

# Accessory functions and variables are prefixed by __; functions meant to be
# used by the client are directly exposed:
# - dev
# - undev
# - dev-status
# - pushon
# - pushonPATH
# - pushonPYTHONPATH
# - popfrom
# - popfromPATH
# - popfromPYTHONPATH

# Keep in mind there is one level of indirection between a stack named $stack
# and the content of $stack, which is intuitively $$stack, and is in practice
# indirected using the idiom eval stack_content=\$$stack.

# Pushes $1/bin and $1 (or by default ./bin and .) on PATH and PYTHONPATH
# respectively
#
# Returns error-code 1 if both paths are already on their respective stacks.
dev() {
	local root="$(readlink -f "${1:-.}")"
	if __dev_isInStack "$root" __DEV_DEVS; then
		echo "$(tput bold)$root$(tput sgr0) $(tput setaf 3)already in dev$(tput sgr0)"
		return 1
	fi
	__dev_prependToStack "$root" __DEV_DEVS
	pushonPATH "$root/bin"
	pushonPYTHONPATH "$root"
}

# Pops $1/bin and $1 (or by default ./bin and .) from PATH and PYTHONPATH
# respectively
#
# Returns error-code 1 if both paths are already off their respective stacks.
undev() {
	if [ $# -eq 0 ] && [ $(__dev_stackDepth __DEV_DEVS) -le 0 ]; then
		echo "$(tput bold)$(tput setaf 1)No dev to undev$(tput sgr0)"
		return 2
	fi

	local IFS_BACKUP="$IFS"; IFS=":"; local devs=($__DEV_DEVS); IFS=$IFS_BACKUP
	local root="$(readlink -f "${1:-${devs[0]}}")"
	if ! __dev_isInStack "$root" __DEV_DEVS ; then
		echo "$(tput bold)$root$(tput sgr0) $(tput setaf 3)already off dev$(tput sgr0)"
		return 1
	fi
	popfromPATH "$root/bin"
	popfromPYTHONPATH "$root"
	__dev_removeFromStack "$root" __DEV_DEVS
}

if hash complete &>/dev/null; then
	__dev_undevComplete() {
		local cur=${COMP_WORDS[COMP_CWORD]}
		local prev=${COMP_WORDS[COMP_CWORD-1]}

		if [ $COMP_CWORD -eq 1 ]; then
			local IFS_BACKUP="$IFS"
			IFS=":"; local devs=($__DEV_DEVS); IFS=$IFS_BACKUP
			COMPREPLY=( $(compgen -W "${devs[*]}" -- $cur) )
		fi
	}
	complete -o nospace -F __dev_undevComplete undev
fi

# Prints the values of PATH and PYTHONPATH, as well as all tracked stacks
dev-status() {
	__dev_devsStatus
	__dev_stacksStatus
}

# Prepends $2 to the stack named $1 and its tracker stack
#
# If the tracker stack didn't exist yet, it's added to the environment variable
# __DEV_STACKS after being created.
#
# If $2 is already in the tracker, the error-code 1 is returned.
#
# e.g. pushon PATH ~/code/project
pushon() {
	local stack="$1"

	# Return an error, warn the user if the path is already is in the stack
	if __dev_isInStack "$2" $(__dev_stackName $stack); then 
		echo "$(tput bold)$2$(tput sgr0) $(tput setaf 1)is already in$(tput sgr0) $(tput bold)$stack$(tput sgr0)"
		return 1
	fi

	# Add $2 to the stack, track it by adding it also to the stack tracker
	# and add the stack tracker to __DEV_STACKS if it's not already there
	__dev_prependToStack $(readlink -f "$2") "$stack"
	__dev_prependToStack $(readlink -f "$2") $(__dev_stackName "$stack")
	if ! __dev_isInStack "$stack" __DEV_STACKS; then __dev_prependToStack "$stack" __DEV_STACKS; fi

	echo "Pushed $(tput bold)$(echo $root | sed "s|$HOME|~|")$(tput sgr0) on $(tput bold)$1$(tput sgr0)"
	return 0
}

if hash complete &>/dev/null; then
	__dev_pushOnComplete() {
		local cur=${COMP_WORDS[COMP_CWORD]}
		local prev=${COMP_WORDS[COMP_CWORD-1]}

		if [ $COMP_CWORD -eq 1 ]; then
			COMPREPLY=( $(compgen -W "$(env | cut -d= -f1 | grep -E *PATH)" -- $cur) )
		elif [ $COMP_CWORD -eq 2 ]; then
			COMPREPLY=( $(compgen -o dirnames $cur -- .) )
		fi
	}
	complete -o nospace -F __dev_pushOnComplete pushon
fi

pushonPATH() { pushon PATH "$1"; }
pushonPYTHONPATH() { pushon PYTHONPATH "$1"; }

# Removes from the stack named $1 and its tracker, $2 or the first tracker path
#
# By default, will behave like a pop for the stack named $1 and its tracker,
# but if given a path as $2, will remove it from the stack named $1 and its
# tracker, even if not at the top of the stack.
#
# If the tracker becomes empty, it is removed from __DEV_STACKS.
# If the stack is empty, returns 2.
# If the stack doesn't contain $1, returns 1.
#
# e.g. popfrom ~/code/project PATH
popfrom() {
	# Parse the stack
	eval local stack=\$$(__dev_stackName $1)
	local IFS_BACKUP="$IFS"
	IFS=":"; local elements=($stack); IFS=$IFS_BACKUP
	
	if [ "${#elements[@]}" -le 0 ]; then
		echo "$(tput setaf 3)Empty stack for $(tput bold)$1$(tput sgr0)"
		return 2
	else
		# Remove $1 from the stack, update the stack tracker by
		# removing it from there too, and $1 was the last path in the
		# stack tracker, remove the stack tracker from __DEV_STACKS
		local element_to_pop="${2:-${elements[0]}}"

		if ! __dev_isInStack "$element_to_pop" $(__dev_stackName $1); then 
			echo "$(tput bold)$element_to_pop$(tput sgr0) $(tput setaf 1)is not in$(tput sgr0) $(tput bold)$1$(tput sgr0)"
			return 1	
		fi

		__dev_removeFromStack "$element_to_pop" $1
		__dev_removeFromStack "$element_to_pop" $(__dev_stackName $1)
		if [ $(__dev_stackDepth $(__dev_stackName $1)) -le 0 ]; then __dev_removeFromStack $1 __DEV_STACKS; fi

		echo "Removed $(tput bold)$(echo $element_to_pop | sed "s|$HOME|~|")$(tput sgr0) from $(tput bold)$1$(tput sgr0)"
		return 0
	fi
}

if hash complete &>/dev/null; then
	__dev_popFromComplete() {
		local cur=${COMP_WORDS[COMP_CWORD]}
		local prev=${COMP_WORDS[COMP_CWORD-1]}

		if [ $COMP_CWORD -eq 1 ]; then
			COMPREPLY=( $(compgen -W "$__DEV_STACKS" -- $cur) )
		elif __dev_isInStack $prev __DEV_STACKS; then
			eval local stack=\$$(__dev_stackName $prev)
			local IFS_BACKUP="$IFS"
			IFS=":"; local elements=($stack); IFS=$IFS_BACKUP
			COMPREPLY=( $(compgen -W "${elements[@]}" -- $cur) )
		fi
	}
	complete -F __dev_popFromComplete popfrom
fi

popfromPATH(){ popfrom PATH "$1"; }
popfromPYTHONPATH() { popfrom PYTHONPATH "$1"; }

# Checks that $1 is a path canonically-equivalent to one in the stack named $2
#
# Canonical-equivalence is the equality of paths resolved using readlink -f.
#
# Returns the result as a return code:
# - 0: $1 canonically-equivalent to one of the paths in the stack named #2
# - 1: $1 is not canonically-equivalent to any of the paths in the stack named
#      $2
# - 2: $1 is empty
#
# e.g. __dev_isInStack ~/code/dev PATH
__dev_isInStack() {
	if [ -z "$1" ]; then return 2; fi
	eval local stack=\$$2
	local IFS_BACKUP="$IFS"
	IFS=":"; local elements=($stack); IFS=$IFS_BACKUP
	for x in "${elements[@]}"; do
		if [ -z "$x" ]; then continue; fi
		if [ "$(readlink -fm $x)" == "$(readlink -f $1)" ]; then return 0; fi
	done
	return 1
}

__dev_inPATH() { __dev_isInStack "$1" PATH; }
__dev_inPYTHONPATH() { __dev_isInStack "$1" PYTHONPATH; }

# Prepends $1 to the stack named $2
#
# This means that the environment variable named $2 is modified in the calling
# shell. If the variable named $2 didn't exist or was empty, a variable named
# $2 is exported and set to $1; if $2 was already a non-empty stack, it's
# prepended with $1, separated with a colon from the previous stack.
#
# e.g. __dev_prependToStack ~/code/dev/bin PYTHONPATH
__dev_prependToStack() {
	eval local stack=\$$2
	if [ -z "$stack" ]; then
		export $2="$1"
	else
		eval "export $2=\"$1:\$$2\""
	fi
}

# Like __dev_prependToStack but postfixes instead of prefixing
__dev_postpendToStack() {
	if [ -z "$stack" ]; then
		export $2="$1"
	else
		eval "export $2=\"\$$2:$1\""
	fi
}

__dev_prependPATH() { __dev_prependToStack "$1" PATH; }
__dev_prependPYTHONPATH() { __dev_prependToStack "$1" PYTHONPATH; }

# Returns the number of elements in the stack named $1
#
# e.g. __dev_stackDepth PATH
__dev_stackDepth() {
	# Parse the stack
	eval local stack=\$$1
	local IFS_BACKUP="$IFS"
	IFS=":"; local elements=($stack); IFS=$IFS_BACKUP
	echo "${#elements[@]}"
}

# Removes the first instance of $1 in the stack named $2
#
# If no element of the stack named $2 is equal to $1, returns error-code 1.
# Beware, contrary to __dev_isInStack and pushon, this function works on
# literal paths and does not try to compare canonicalized paths.
#
# e.g. __dev_removeFromStack /home/user/code/dev PATH
__dev_removeFromStack() {
	# Parse the stack
	eval local stack=\$$2
	local IFS_BACKUP="$IFS"
	IFS=":"; local elements=($stack); IFS=$IFS_BACKUP
	# Build the new stack by iterating copying elements over except for the first occurence of the path we want to remove
	local new_stack=""
	local removed="" # Empty is false
	for x in "${elements[@]}"; do
		if [ ! $removed ] && [ "$x" == "$1" ]; then
			removed="true"
		else
			if [ -z "$new_stack" ]; then
				new_stack="$x"
			else
				new_stack="$new_stack:$x"
			fi
		fi
	done

	if [ -z $removed ]; then
		return 1
	elif [ ${#elements[@]} -eq 1 ]; then
		unset $2
	else
		eval "export $2=\"$new_stack\""
	fi
}

__dev_removeFromPATH() { __dev_removeFromStack "$1" PATH; }
__dev_removeFromPYTHONPATH() { __dev_removeFromStack "$1" PYTHONPATH; }

# Returns the name of the env variable tracking paths added to the stack named $1
__dev_stackName() {
	echo __DEV_$1_STACK
}

# Tools

__dev_variable_status() {
	echo -n "$(tput bold; tput setaf 4)$1: $(tput sgr0)"
	eval variable_defined=\${$1+undefined}
	if [ -z $variable_defined ]; then
		echo "$(tput setaf 1)undefined$(tput sgr0)"
	else
		eval echo \$$1
	fi
}

__dev_symbol_status() {
	echo -n "$(tput bold; tput setaf 4)$1: $(tput sgr0)"
	if type $1 &>/dev/null; then
		echo "$(tput setaf 2)$(type -t $1)$(tput sgr0)"
	else
		echo "$(tput setaf 1)undefined$(tput sgr0)"
	fi
}

dev_functions="__dev_isInStack __dev_inPATH __dev_inPYTHONPATH __dev_prependToStack __dev_postpendToStack __dev_prependPATH __dev_prependPYTHONPATH __dev_stackDepth __dev_removeFromStack __dev_removeFromPATH __dev_removeFromPYTHONPATH __dev_stackName pushon pushonPATH pushonPYTHONPATH popfrom popfromPATH popfromPYTHONPATH __dev_variable_status __dev_symbol_status __dev_pathsStatus __dev_devsStatus __dev_stacksStatus __dev_status __dev_cleanup dev-status dev undev"
dev_variables="__DEV_STACKS __DEV_DEVS"

__dev_pathsStatus() {
	echo "$(tput bold)$(tput setaf 6)Paths$(tput sgr0)"
	if [ -z $__DEV_STACKS ]; then
		echo -e "\t$(tput setaf 1)No dev stack$(tput sgr0)"
	else
		# Parse the stack
		local IFS_BACKUP="$IFS";IFS=":"; local stacks=($__DEV_STACKS); IFS=$IFS_BACKUP
		for s in "${stacks[@]}"; do
			eval local stack_string=\$$s
			echo -e "\t$(tput bold)$(tput setaf 4)$s:$(tput sgr0) ${stack_string:-$(tput setaf 1)undefined$(tput sgr0)}"
		done
	fi
}

__dev_devsStatus() {
	echo -e "$(tput bold)$(tput setaf 6)Devs$(tput sgr0)"
	if [ -z $__DEV_DEVS ]; then
		echo -e "\t$(tput setaf 1)No devs$(tput sgr0)"
	else
		IFS_BACKUP="$IFS";IFS=":"; devs=($__DEV_DEVS); IFS=$IFS_BACKUP
		for d in "${devs[@]}"; do
			echo -e "$(tput bold)$(tput setaf 2)\t$(echo $d | sed "s|$HOME|~|")$(tput sgr0)"
		done
	fi
}

__dev_stacksStatus() {
	echo -e "$(tput bold)$(tput setaf 6)Tracked stacks$(tput sgr0)"
	if [ -z $__DEV_STACKS ]; then
		echo -e "\t$(tput setaf 1)No stack$(tput sgr0)"
	else
		# Parse the stack
		local IFS_BACKUP="$IFS";IFS=":"; local stacks=($__DEV_STACKS); IFS=$IFS_BACKUP
		for s in "${stacks[@]}"; do
			eval local stack_string=\$$(__dev_stackName $s)
			IFS_BACKUP="$IFS";IFS=":"; stack_elements=($stack_string); IFS=$IFS_BACKUP

			echo -en "\t$(tput bold)$(tput setaf 4)$s stack (${#stack_elements[@]}):$(tput sgr0) "
			if [ "${#stack_elements[@]}" -ge 2 ]; then echo; fi
			for x in "${stack_elements[@]}"; do
				if [ "${#stack_elements[@]}" -ge 2 ]; then
					echo -e "\t\t$x"
				else
					echo -n "$x"
				fi
			done
			if [ "${#stack_elements[@]}" -le 1 ]; then echo; fi
		done

		__dev_pathsStatus
	fi
}

__dev_metaStatus() {
	echo "$(tput bold)$(tput setaf 6)Functions$(tput sgr0)"
	for f in $dev_functions; do
		echo -e "\t$(__dev_symbol_status $f)"
	done

	echo "$(tput bold)$(tput setaf 6)Meta-variables$(tput sgr0)"
	for e in $dev_variables; do
		echo -e "\t$(__dev_variable_status $e)"
	done
}

__dev_status() {
	__dev_metaStatus
}

__dev_cleanup() {
	# Cleanup functions
	for f in $dev_functions; do
		unset $f
	done

	# Cleanup stacks
	# Parse the stack
	local IFS_BACKUP="$IFS";IFS=":"; local stacks=($__DEV_STACKS); IFS=$IFS_BACKUP
	for s in "${stacks[@]}"; do
		unset $s
	done

	# Cleanup meta-variables
	for e in $dev_variables; do
		unset $e
	done
}
